Taints and Tolerations:

Node affinity é uma propriedade dos pods que os atrai para um conjunto de nós (seja como uma preferência ou um requisito rígido). Taints são o oposto - eles permitem que um nó repela um conjunto de pods. As tolerâncias são aplicadas aos pods. As tolerâncias permitem que o agendador agende pods com taints correspondentes. As tolerâncias permitem o escalonamento, mas não garantem o escalonamento: o escalonador também avalia outros parâmetros como parte de sua função. Taints e tolerâncias trabalham juntos para garantir que os pods não sejam programados em nós inadequados. Um ou mais taints são aplicados a um nó; isso marca que o nó não deve aceitar nenhum pod que não tolere as taints.

Cria um arquivo de POD:
kubectl run app-taint --image=nginx --dry-run=client -o yaml > pod-taint.yaml

apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: app-taint
  name: app-taint
spec:
  containers:
  - image: nginx
    name: app-taint
    resources: {}
  tolerations:
  - key: node-role.kubernetes.io/control-plane
    effect: NoSchedule    
  nodeSelector: 
    kubernetes.io/hostname: kmaster   
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}


Com os parametros de tolerations e nodeSelector no arquivo acima, foi possivel executar o POD no node master, o valor de key foi pego com o comando Describe no node master.
 tolerations:
  - key: node-role.kubernetes.io/control-plane
    effect: NoSchedule  


nodeSelector: 
    kubernetes.io/hostname: kmaster   


---------------------------------------------------------------------------------------------------------------------

Taint e Tolerations parte 2

NoSchedule:	        Pods que não toleram esse taint não são programados no nó. Os pods atuais não são removidos do nó.
PreferNoSchedule:	O Kubernetes evita a programação de pods que não toleram esse taint no nó.
NoExecute:        	O pod é removido do nó caso já esteja em execução nele e não é programado no nó caso ainda não esteja em execução nele.


Criando uma label para o node kworker1:
kubectl label node kworker1 disk=SSD

Listando a label no node kworker1:
kubectl label node kworker1 --list

Subindo o POD com o sesguinte conteudo: 
kubectl create -f pod-selector.yaml
apiVersion: v1
kind: Pod
metadata:
  name: nginx
  labels:
    env: test
spec:
  containers:
  - name: nginx
    image: nginx
    imagePullPolicy: IfNotPresent
  nodeSelector:
    disk: SSD


Aplicando a taints no Noschedule no node kworker1, dessa forma os containner que já estão rodando no node não serão afetados,
porém são será possivél executar novos conteinners nesse node:
kubectl taint node kworker1 dedicated:NoSchedule


Para executar um pod nesse node temos que adicionar os parametros tolerations:

kubectl create -f pod-selector-e-tolerations.yaml

apiVersion: v1
kind: Pod
metadata:
  name: nginx
  labels:
    env: test
spec:
  containers:
  - name: nginx
    image: nginx
    imagePullPolicy: IfNotPresent
  nodeSelector:
    disk: SSD
  tolerations:
  - key: "dedicated"
    effect: "NoSchedule"

------------------------------------------------------------------------------------------------------------

Removendo a taint do node:
kubectl taint node kworker1 dedicated-

kubectl delete -f pod-selector-e-tolerations.yaml
